<?php

namespace AppBundle\Repository;

/**
 * MembershipRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MembershipRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @param $start
     * @param $length
     * @param $filter
     * @return mixed
     */
    public function search($start, $length, $filter)
    {
        $joinMembership = false;

        $repository = $this->getEntityManager()->getRepository('AppBundle:Membership');

        $builder = $repository->createQueryBuilder('s');
        $builder->select('s, c');
        $builder->innerJoin('s.contact', 'c');

        if (isset($filter['search']) && $filter['search']) {
            $joinMembership = true;
            $builder->andWhere('c.firstName LIKE :string');
            $builder->orWhere('c.lastName LIKE :string');
            $builder->orWhere('c.email LIKE :string');
            $builder->orWhere('s.status LIKE :string');
            $builder->orWhere('mt.name LIKE :string');
            $builder->setParameter('string', '%'.$filter['search'].'%');
        }

        if (isset($filter['memberType']) && $filter['memberType']) {
            if ($filter['memberType'] == 'expired') {
                $builder->andWhere('c.activeMembership IS NULL');
                $builder->andWhere("s.status = 'EXPIRED'");
            } else if ($filter['memberType'] == 'active') {
                $builder->andWhere('c.activeMembership IS NOT NULL');
                $builder->andWhere("s.status = 'ACTIVE'");
            }
        }

        if (isset($filter['date_from']) && $filter['date_from']) {
            $builder->andWhere('s.expiresAt >= :dateFrom');
            $builder->setParameter('dateFrom', $filter['date_from'].' 00:00:00');
        }

        if (isset($filter['date_to']) && $filter['date_to']) {
            $builder->andWhere('s.expiresAt <= :dateTo');
            $builder->setParameter('dateTo', $filter['date_to'].' 23:59:59');
        }

        if ($joinMembership) {
            $builder->innerJoin('s.membershipType', 'mt');
        }

        $builder->setFirstResult($start);
        $builder->setMaxResults($length);
        $builder->addOrderBy("s.createdAt", "DESC");

        $query = $builder->getQuery();

        return $query->getResult();
    }

    /**
     * @return integer
     */
    public function countAll()
    {
        $repository = $this->getEntityManager()->getRepository('AppBundle:Membership');
        $builder = $repository->createQueryBuilder('c');
        $builder->add('select', 'COUNT(c) AS qty');
        $query = $builder->getQuery();
        if ( $results = $query->getResult() ) {
            $total = $results[0]['qty'];
        } else {
            $total = 0;
        }
        return $total;
    }

    /**
     * @return array|bool
     * Called from update route and in scheduled membership expiry
     */
    public function getExpiredMemberships()
    {
        $repository = $this->getEntityManager()->getRepository('AppBundle:Membership');
        $qb = $repository->createQueryBuilder('m');
        $qb->select('m')
            ->where('m.expiresAt < :date')
            ->andWhere('m.status = :statusActive')
            ->setParameter('date', new \DateTime())
            ->setParameter('statusActive', 'ACTIVE');

        $query = $qb->getQuery();

        if ( $results = $query->getResult() ) {
            return $results;
        } else {
            return false;
        }
    }

    /**
     * Called when user logs in
     */
    public function activatePendingMemberships()
    {
        // Activate pending memberships
        $qb = $this->getEntityManager()->createQueryBuilder();
        $q = $qb->update('AppBundle:Membership', 'm')
            ->set('m.status', ':statusActive')
            ->where('m.startsAt < :date')
            ->andWhere('m.status = :statusPending')
            ->setParameter('date', new \DateTime())
            ->setParameter('statusPending', 'PENDING')
            ->setParameter('statusActive', 'ACTIVE')
            ->getQuery();
        $q->execute();
    }

}
