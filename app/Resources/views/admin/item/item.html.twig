{# app/Resources/views/product/item.html.twig #}
{% extends 'base.html.twig' %}

{% block pageCss %}
    <script src="/plugins/dymo/DYMO.Label.Framework.3.0.js" type="text/javascript" charset="UTF-8"></script>
{% endblock %}

{% block title %}{{ title }}{% endblock %}

{% block pageTitle %}{{ title }}{% endblock %}

{% block header_bar %}

    {% if item.itemType == 'kit' %}
        <div class="header-bar">
            <i class="fa fa-sitemap" style="color:#000"></i>
            This item is a kit of other parts. It has no inventory level or location.
            {% if item.id %}
                <a href="{{ path('change_item_type', {itemId: item.id}) }}" class="btn btn-xs btn-default pull-right modal-link">Change type</a>
            {% endif %}
        </div>
        <style>
            .hide-for-kits {
                display: none;
            }
        </style>
    {% elseif item.itemType == 'service' %}
        <div class="header-bar">
            <i class="fa fa-handshake-o" style="color:#000"></i>
            This is a service. Inventory levels are not managed, but it can be added to loans if made visible online.
            {% if item.id %}
                <a href="{{ path('change_item_type', {itemId: item.id}) }}" class="btn btn-xs btn-default pull-right modal-link">Change type</a>
            {% endif %}
        </div>
        <style>
            .hide-for-stock {
                display:none;
            }
            .hide-for-service {
                display:none;
            }
        </style>
    {% elseif item.itemType == 'stock' %}
        <div class="header-bar">
            <i class="fa fa-cube" style="color:#000"></i>
            This is a stock item (consumable)
            {% set inventoryLevel = 0 %}
            {% for i in inventory %}
                {% set inventoryLevel = inventoryLevel + i.qty %}
            {% endfor %}

            {% if item.id %}
            <span class="">
                <span style="padding: 0 30px">{{ inventoryLevel }} in stock </span>
                <a href="{{ path('inventory_edit', {id: item.id}) }}" class="btn btn-xs btn-primary modal-link">Manage inventory</a>
            </span>
            {% else %}
                <span class="pull-right">
                    Once you have created the item, you will be able to add inventory.
                </span>
            {% endif %}
            {% if item.id %}
                <a href="{{ path('change_item_type', {itemId: item.id}) }}" class="btn btn-xs btn-default pull-right modal-link">Change type</a>
            {% endif %}
        </div>
        <style>
            .hide-for-stock {
                display:none;
            }
        </style>
    {% else %}
        <style>

        </style>
    {% endif %}

    {% if countItems > 1 and tenantInformation.setting('group_similar_items') == 1 %}
        <div class="header-bar">
            There are <a href="{{ path('item_list') }}?search={{ item.name }}">{{ countItems }} items in this group</a>.
            All fields apart from <strong>price paid</strong>, <strong>code</strong>, <strong>serial number</strong> and <strong>condition</strong>
            will also be updated for other items in the group.
        </div>
    {% endif %}

{% endblock %}

{% block body %}

    {% if tenantInformation.setting('postal_shipping_item') == item.id and item.id > 0 %}
        <div class="alert alert-warning">
            This is the item added to loans when a shipping charge is required.
            The shipping prices are determined at Settings &raquo; Reservations.
        </div>
    {% endif %}

    {{ form_start(form, { 'attr' : { 'class': 'item-form', 'id' : "itemForm" } }) }}

    <input type="hidden" name="numberOfCopies" id="numberOfCopies" value="0">

    {% if item.itemType == 'kit' and not item.id %}
    <div class="page-help">
        <h4>About kits</h4>
        <strong>Kits</strong> are used when you want to add multiple items to a basket in one go, and charge a single price for all the components. <br>
        The kit item will show the price entered on this screen, and the components will be set as zero price.<br>
        Once added to the basket, components behave just as though they had been added separately;
        they can be removed, dates changed, prices changed and so on (subject to user permissions).<br>
        Kits do not exist as an item in real life, so they do not have a physical location and cannot be checked in or out.
    </div>
    {% endif %}

    {{ include('item/maintenance_warning.html.twig') }}

    <div id="item-inventory-detail" {% if item.itemType != 'loan' %}style="display:none"{% endif %}>
        {% if item.id %}
            <input type="hidden" id="itemIdForTest" value="{{ item.id }}">

            {% if item.inventoryLocation is null %}
                {#An archived or sold item#}
            {% elseif item.inventoryLocation.id == 1 %}
                <div class="label bg-teal pull-left">On loan</div>
                <span class="item-inventory-detail-span">
                to {{ activeLoanInformation.contactName }} on loan
                <a href="{{ path('public_loan', {loanId: activeLoanInformation.loanId}) }}">{{ activeLoanInformation.loanId }}</a>,
                due back {{ activeLoanInformation.dateTo|date("F d") }}
            </span>
            {% elseif activeLoanInformation|length > 0 %}
                <div class="label bg-orange">Reserved</div>
                <span class="item-inventory-detail-span">
                    by <a href="{{ path('public_loan', {loanId: activeLoanInformation.loanId}) }}">{{ activeLoanInformation.contactName }}</a>
                    from {{ activeLoanInformation.dateFrom|date("F d") }} to {{ activeLoanInformation.dateTo|date("F d") }}
                </span>
            {% elseif item.inventoryLocation.isAvailable == 1 %}
                <div class="label bg-green">Available</div>
            {% else %}
                <div class="label bg-yellow">On hold</div>
            {% endif %}

            {% if item.inventoryLocation %}
            <span class="item-inventory-detail-span">Location:</span>
            <span class="item-inventory-detail-span">
                <strong>
                {% if isMultiSite and item.inventoryLocation.id != 1%}
                    {{ item.inventoryLocation.site.name }} :
                {% endif %}
                    {{ item.inventoryLocation.name }}
                </strong>
            </span>

            {% if item.inventoryLocation.id != 1 %}
                <span class="item-inventory-detail-span">
                    <a class="modal-link" href="{{ path('item_move', {idSet: item.id}) }}">Move / Service</a>
                </span>
            {% endif %}
            {% endif %}

        {% else %}
            {{ form_row(form.inventoryLocation) }}
        {% endif %}
    </div>


    <div class="nav-tabs-custom">

        <ul class="nav nav-tabs" id="item_tabs">
            <li class="active">
                <a href="#tab_1">Item information</a>
            </li>

            {% if item.itemType == 'kit' %}
            <li>
                <a href="#item_components" id="set-item-components">Kit components ({{ item.components|length }})</a>
            </li>
            {% endif %}

            {% if item.itemType == 'loan' %}
            <li>
                <a href="#prompts" id="set-prompts">Check in/out</a>
            </li>
            {% endif %}

            {% if item.itemType == 'loan' and tenantInformation.feature('MaintenancePlan') %}
            <li>
                <a href="#maintenance" id="set-maintenance">Maintenance</a>
            </li>
            {% endif %}

            {#Note this tab contains form_rest to show the extra fields and thus must be the last tab in the form#}
            <li>
                <a href="#custom_fields" id="set-custom-fields">Custom Fields</a>
            </li>

            {% if item.id %}
                <li>
                    <a href="{{ path('item_history', {id: item.id}) }}" class="media_node" rel="tooltip"
                       data-toggle="tabajax" data-target="#item_info">Item history</a>
                </li>
                <li>
                    <a href="{{ path('item_files', {id: item.id}) }}" class="media_node" rel="tooltip"
                       data-toggle="tabajax" data-target="#item_files">Attachments</a>
                </li>

                {% if item.itemType == 'loan' %}
                <li>
                    <a href="{{ path('item_reservations_html', {itemId: item.id}) }}" class="media_node" rel="tooltip"
                       data-toggle="tabajax" data-target="#item_reservations_html">Reservations</a>
                </li>
                {% endif %}
            {% endif %}
        </ul>

        <div class="tab-content">

            <div class="tab-pane active" id="tab_1">
                {{ include('admin/item/tabs/item_info.html.twig') }}
            </div>

            <div class="tab-pane" id="prompts" style="position: relative">
                {{ include('admin/item/tabs/item_prompts.html.twig') }}
            </div>

            <div class="tab-pane" id="maintenance" style="position: relative">
                {{ include('admin/item/tabs/item_maintenance.html.twig') }}
            </div>

            {# This tab must be last in the form due to form_rest() #}
            <div class="tab-pane" id="custom_fields" style="position: relative">
                <div class="row">
                    <div class="col-md-6">
                        {% if customFieldsExist %}
                            {{ form_rest(form) }}
                            <div class="page-help">
                                * Fields with an asterisk are shown on your Lend Engine site.
                            </div>
                        {% else %}

                            {% if tenantInformation.feature('ProductField') %}
                            <div class="page-help">
                                Add extra custom fields at Settings &raquo; Item fields.
                            </div>
                            {% else %}
                            <div class="upgrade">
                                Item custom fields are not available on your plan.
                                <a href="{{ path('billing') }}">Upgrade / view plans</a>
                            </div>
                            {% endif %}
                        {% endif %}
                    </div>
                </div>
            </div>

            {# KITTING #}
            <div class="tab-pane" id="item_components">
                {{ include('admin/item/tabs/item_kit_components.html.twig') }}
            </div>

            <div class="tab-pane" id="item_info">
                <!-- ajax-content -->
            </div>

            <div class="tab-pane" id="item_files">
                <!-- ajax-content -->
            </div>

            {% if item.itemType == 'loan' %}
            <div class="tab-pane" id="item_reservations_html">
                <!-- ajax-content -->
            </div>
            {% endif %}

        </div>
        <!-- /.tab-content -->
    </div>

    <div class="page-controls">
        <button type="submit" id="save-item" name="submitForm" value="save" class="btn bg-green btn-loading pull-right">Save <span
                    class="hidden-xs">item</span></button>
        <button type="submit" id="save-and-new" name="submitForm" value="saveAndNew"
                class="btn btn-default btn-loading hidden-xs">Save
            and add another
        </button>

        {% if item.itemType == 'loan' %}
        <button type="submit" id="save-and-copy" name="submitForm" value="saveAndCopy" class="btn btn-default btn-loading hidden-xs">
            Copy
        </button>
        {% endif %}

    </div>

    {{ form_end(form) }}

    {{ source('partials/image-thumb-js.html') }}

{% endblock %}

{% block pagejs %}
    <script>

        Dropzone.autoDiscover = false;

        $(document).ready(function () {

            $('.ajax-contact').select2({
                ajax: {
                    url: '{{ path('ajax_contact_search') }}',
                    dataType: 'json',
                    placeholder: 'Search for a repository',
                    processResults: function (data) {
                        return {
                            results: data
                        };
                    }
                }
            });

            {% if tenantInformation.setting('group_similar_items') == 1 %}
            $(document).on('blur', "#item_name", function() {
                if ($(this).val()) {
                    var itemId = $("#itemIdForTest").val();
                    $.get("{{ path('item_name_check') }}?name="+$(this).val()+"&id="+itemId, function(result) {
                        if (result == 1) {
                            var msg = "An item already exists with this name.\n";
                            msg += "Saving this item will put it into a product group and ";
                            msg += "overwrite the other item's fields using values from this one.\n";
                            msg += "You might prefer to copy an existing item with this name instead.\n\n";
                            msg += "Click OK to continue with the name or Cancel to change it.";
                            if (window.confirm(msg)) {
                                // continue
                            } else {
                                $("#item_name").val("").focus();
                            }
                        } else {

                        }
                    }, "text");
                }
            });
            {% endif %}

            $('#item_tabs a').click(function (e) {
                e.preventDefault();
                $(this).tab('show');
                setUpSelectMenus();
            });

            var itemId = {% if item.id %}{{ item.id }}{% else %}null{% endif %};


            var filelist = [];
            var resizeImgList = [];

            {% if item.id %}

            Dropzone.options.imageUploader = {
                url: "{{ oneup_uploader_endpoint('gallery') }}",
                autoProcessQueue: false,
                uploadMultiple: true,
                addRemoveLinks : true,
                method: "post",
                paramName: "file",
                acceptedFiles: "image/*",
                maxFilesize: 5,
                init: function() {

                    imageUploader = this; // closure
                    var canvas = document.createElement('canvas');

                    // You might want to show the submit button only when
                    // files are dropped here:
                    this.on('addedfile', function(file) {
                        var max_w = 800;
                        var max_h = 800;

                        var reader = new FileReader();
                        reader.onload = function(e) {
                            var img = new Image();
                            img.onload = function() {
                                var w = img.width;
                                var h = img.height;
                                var ratio_w = 1;
                                var ratio_h = 1;
                                if(w > max_w) {
                                    ratio_w = max_w / w;
                                }
                                if(h > max_h) {
                                    ratio_h = max_h / h;
                                }
                                var ratio = Math.min(ratio_w, ratio_h);
                                w = Math.floor(w * ratio);
                                h = Math.floor(h * ratio);
                                canvas.width = w;
                                canvas.height = h;
                                var ctx = canvas.getContext('2d', {preserveDrawingBuffer: true});
                                ctx.drawImage(img, 0, 0, w, h);
                                var dataURL = canvas.toDataURL('image/jpeg', 0.5);
                                var a = dataURL.split(',')[1];
                                var blob = atob(a);
                                var array = [];
                                for(var k = 0; k < blob.length; k++) {
                                    array.push(blob.charCodeAt(k));
                                }
                                var data = new Blob([new Uint8Array(array)], {type: 'image/jpeg'});
                                resizeImgList.push(data);
                                imageUploader.processFile(data);
                                imageUploader.removeFile(file);
                            };
                            img.src = e.target.result;
                        };
                        reader.readAsDataURL(file);
                    });

                    this.on('removedfile', function(file) {
                        var k = filelist.indexOf(file);
                        if (k > -1) {
                            filelist.splice(k, 1);
                            resizeImgList.splice(k, 1);
                        }
                    });

                    this.on("sending", function (file, xhr, formData) {
                        formData.append("itemId", itemId);
                        console.log("Uploading file ... ");
                        startImagesUploading();
                    });

                    this.on("success", function (file, serverResponse) {
                        console.log(file);
                        if (file.status == "success") {
                            console.log("Uploaded OK");
                            insertFileThumbnail(serverResponse.newFileName);
                        }
                    });

                    this.on("queuecomplete", function (file) {
                        console.log("All files have finished uploading");
                        finishImagesUploading();
                    });

                }
            };

            var imageUploader = new Dropzone('div#imageUploader', Dropzone.options.imageUploader);

            var thumbNailBlock = $("#item-thumbnails");

            // Set the correct thumbnail
            thumbNailBlock.on("click", ".image-selector", function () {
                var imageName = $(this).attr('image-name');
                setMainImage(imageName);
            });

            // Remove an image
            thumbNailBlock.on("click", ".image-remove", function () {
                var imageName = $(this).attr('image-name');
                var imageDiv = $(this).parent();
                $(this).html('<img src="/images/ajax-loader.gif">');
                $.get(
                        "/admin/item/{{ item.id }}/image/" + imageName + "/remove",
                        {item: "{{ item.id }}"},
                        function (data) {
                            if (data == "ok") {
                                console.log("removing image " + imageName);
                                imageDiv.fadeOut(500).remove();
                            }
                        },
                        "json");
            });

            // Rotate an image
            thumbNailBlock.on("click", ".image-rotate", function () {
                var imageName = $(this).attr('image-name');
                var imageDiv = $(this).parent();
                var image = imageDiv.find('.img-thumbnail');
                var triggerLink = $(this);
                triggerLink.html('<img src="/images/ajax-loader.gif">');
                if (triggerLink.hasClass('go-left')) {
                    rotationDirection = 'left';
                } else {
                    rotationDirection = 'right';
                }
                $.get(
                        "/admin/image/" + imageName + "/rotate",
                        {rotate: rotationDirection},
                        function (data) {
                            if (data == "ok") {
                                d = new Date();
                                image.attr("src", image.attr("src")+"?"+d.getTime());
                                if (rotationDirection == 'left') {
                                    triggerLink.html('<i class="fa fa-rotate-left"></i>');
                                } else {
                                    triggerLink.html('<i class="fa fa-rotate-right"></i>');
                                }
                            }
                        },
                        "json");
            });

            function insertFileThumbnail(imageName) {
                var source = $("#image-thumbnail-template").html();
                var template = Handlebars.compile(source);
                var image = {
                    imageName: imageName,
                    imageId: imageName.replace(/\.[^/.]+$/, ""),
                    imagePath: "{{ tenantInformation.s3Bucket }}{{ tenantInformation.schema }}/thumbs/" + imageName
                };
                var html = template(image);
                $("#image-thumbnails-closer").before(html);
                $("#no-images").remove();
            }

            function setMainImage(imageName) {
                console.log("Setting as main image: " + imageName);
                $("#item_imageName").val(imageName);
                $(".image-selector").removeClass("active").html("Set as main image");
                var imageId = imageName.replace(/\.[^/.]+$/, "");
                $("#set_" + imageId).addClass("active").html("Main image");
            }

            function startImagesUploading() {
                $("#save-item").attr('disabled', true).html("Files uploading ...");
                $("#save-and-new").hide();
                $("#images-processing").show();
            }

            function finishImagesUploading() {
                $("#save-item").attr('disabled', false).html("Save item");
                $("#save-and-new").show();
                $("#images-processing").hide();
            }

            // Insert existing images
            {% if item.images | length > 0 %}
            {% for image in item.images %}
            insertFileThumbnail("{{ image.imageName }}");
            {% endfor %}
            setMainImage("{{ item.imageName }}");
            {% endif %}

            {% endif %}

            // LABELS
            {% if tenantInformation.useLabels %}
            var printButton = $('#printButton');
            var printers = [];
            var label = null;

            var f = dymo.label.framework;
            var labelName = "{{ tenantInformation.setting('label_type') }}";

            function getPrintersFromFramework() {
                printers = f.getPrinters();
                if (printers.length == 0) {
                    return false;
                }
                return true;
            }

            $(document).on('click', '#printButton', function(){
                console.log("printing label ...");
                try {
                    var printer = printers[0];
                    if (!printer) {
                        throw new Error("Select printer");
                    }
                    if (!label) {
                        throw new Error("Label is not loaded. Wait until is loaded or reload the page");
                    }
                    // set data
                    var labelSet = new f.LabelSetBuilder();
                    labelSet.addRecord()
                            .setText("ORG_NAME", "{{ tenantInformation.companyName }}")
                            .setText("BARCODE", "{{ item.id }}")
                            .setText("SKU", "Item code:\n{{ item.sku }}");
                    // print
                    label.print(printer.name, null, labelSet.toString());
                } catch(e) {
                    alert(e.message || e);
                }
            });

            if (getPrintersFromFramework()) {
                // Create a label from the template
                $.get("/label_templates/"+labelName+".label", function(labelXml) {
                    label = f.openLabelXml(labelXml);
                }, "text");
            }
            {% endif %}

            $(document).on('click', '#save-and-copy', function(e){
                e.preventDefault();
                var copies = 0;
                var prompt = '';
                {% if tenantInformation.setting('group_similar_items') %}
                prompt = "You have 'group similar items' setting ON. The SAME images will be shared on the copied item. " +
                                "If you change or edit images on the new item, images for the original item will also be changed. \n\n" +
                                "If you want to manage images separately on the new item, turn OFF the grouping setting " +
                                "at Settings > Member site, and then ensure your new item has a unique name." +
                                "\n\nEnter how many copies you want:";
                {% else %}
                prompt = "You have 'group similar items' setting OFF. Images or attachments will not be copied to the new item." +
                                "\n\nEnter how many copies you want:";
                {% endif %}
                if (copies = window.prompt(prompt, 1)) {
                    $("#numberOfCopies").val(copies);
                    $("#itemForm").submit();
                }
                return false;
            });
        });

        $(document).ready(function() {
            $("#item_description").limiter(1000);
            $("#item_careInformation").limiter(1000);
            $("#item_componentInformation").limiter(1000);
        });
    </script>
{% endblock %}
