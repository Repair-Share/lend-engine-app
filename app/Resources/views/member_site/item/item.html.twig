{% trans_default_domain 'member_site' %}
{% extends 'member_site/themes/loader.html.twig' %}

{% block sitesKey %}{% endblock %}

{% block body %}
<style>
    .openinghours {
        font-size: 10px;
    }
    #kit-wrapper {
        padding: 10px; background-color: #efefef; border: 1px solid #dedede; border-radius: 4px
    }
    {% if product.itemType != "loan" and product.itemType != "kit" %}
    #calendar { display:none }
    #calendar-key { display:none }
    {% endif %}
</style>

    <div class="row" id="item-title">
        <div class="col-md-12">
            <div class="block-borrow">
                <a href="{{ path('public_product', {productId: product.id}) }}" class="btn btn-xs btn-danger pull-right" id="button-cancel">{% trans %}button_cancel{% endtrans %}</a>
                {% trans %}public_item.borrow_now{% endtrans %}:
            </div>
            <h2>
                {% if not product.showOnWebsite %}
                    <i class="fa fa-exclamation-circle" data-toggle="tooltip" style="color: #ff741e" title="This item is not shown to members"></i>
                {% endif %}
                {{ product.name }}
            </h2>
            {% if similarItemCount > 1 %}
                <div class="similar-items">
                    <i class="fa fa-exclamation-triangle"></i>
                    {{ similarItemCount }} {% trans %}public_item.similar_items{% endtrans %}. <a href="{{ path('public_products') }}?search={{ product.name }}&see_variations=true">{% trans %}public_item.see_all{% endtrans %}</a>.
                </div>
            {% endif %}
        </div>
    </div>

    {% if is_granted('ROLE_ADMIN') %}
        {% set item = product %}
        {{ include('item/maintenance_warning.html.twig') }}
    {% endif %}

    <div id="item-core">
        {{ include('member_site/item/item_core.html.twig') }}
    </div>

    {% if app.request.get('extend') %}

        {{ form_start(form, { 'attr' : { 'class': 'payment-form', 'id' : "paymentForm" } }) }}

        <input type="hidden" name="loanStartAt" id="loanStartAt" value="{{ loanStartAt }}">
        <input type="hidden" name="itemDueInAt" id="itemDueInAt" value="{{ itemDueInAt }}">
        <input type="hidden" name="new_return_date" id="newReturnDate">
        <input type="hidden" name="new_return_time" id="newReturnTime">
        <input type="hidden" name="new_return_site_id" id="newReturnSiteId">
        <input type="hidden" name="contactEmail" id="contactEmail" class="contact-email" value="{{ user.email }}">

        {{ include('member_site/partials/modal_extend.html.twig') }}

        <div class="row">
            <div class="col-md-12">
                <div class="alert alert-info">
                    {% trans %}public_loan.choose_new_date{% endtrans %}.
                </div>
                <div id="calendar"></div>
            </div>
        </div>

        {{ form_end(form) }}

    {% else %}

    <form method="POST" id="reserve_form" action="{{ path('basket_add_item', {itemId: product.id}) }}">

        <input type="hidden" name="date_from" id="date_from">
        <input type="hidden" name="time_from" id="time_from">
        <input type="hidden" name="date_to" id="date_to">
        <input type="hidden" name="time_to" id="time_to">
        <input type="hidden" name="from_site" id="from_site">
        <input type="hidden" name="to_site" id="to_site">
        <input type="hidden" name="item_fee" id="total_fee">

        {{ include('member_site/partials/modal_borrow.html.twig') }}

        <div id="calendar"></div>

    </form>

    {% endif %}

    <br>
    <div class="row" id="calendar-key">
        {% for site in sites %}
            {% if site.isActive %}
            <div class="col-xs-6 col-md-4 site-id-{{ site.id }}">
                <div class="site" style="border-left: 8px solid {{ site.colour }};">
                    <div style="padding-bottom: 6px;">{{ site.name }}</div>
                    <a href="https://www.google.co.uk/maps/search/{{ site.address }},{{ site.postCode }}"
                       class="hidden-xs"
                       target="_blank">
                        {{ site.address }} <i class="fa fa-external-link-alt" style="font-size: 0.8em"></i>
                    </a>
                </div>
            </div>
            {% endif %}
        {% endfor %}
    </div>

    {% endblock %}

{% block pagejs %}
    <script>

        var itemLoanDays = {{ itemLoanDays }};
        var maxLoanDays = {{ maxLoanDays|number_format(0) }};
        var minLoanDays = {{ minLoanDays|number_format(0) }};
        var dailyFee = {{ dailyFee|number_format(6) }};
        var itemFee = {{ itemFee|number_format(6) }};
        var fixedFeePricing = "{{ tenantInformation.fixedFeePricing }}";
        var bufferHours = {{ tenantInformation.setting('reservation_buffer')|number_format(0) }};
        var itemType = "{{ product.itemType }}";
        var itemLocationIsAvailable = "{{ product.inventoryLocation.isAvailable }}";

        // Translations
        var text_pickup_day = "{% trans %}calendar.pickup_day{% endtrans %}";
        var text_my_booking = "{% trans %}calendar.my_booking{% endtrans %}";
        var text_on_loan    = "{% trans %}calendar.on_loan{% endtrans %}";
        var text_reserved   = "{% trans %}calendar.reserved{% endtrans %}";
        var text_clash_date = "{% trans %}calendar.text_clash_date{% endtrans %}";
        if (bufferHours > 0) {
            text_clash_date += "<br>We require a no-loan period of "+bufferHours+" hours between each loan.";
        }
        var text_return_after_pickup = "{% trans %}calendar.text_return_after_pickup{% endtrans %}";
        var alert_already_booked = "{% trans %}calendar.alert_already_booked{% endtrans %}";
        var alert_not_your_booking = "{% trans %}calendar.alert_not_your_booking{% endtrans %}";
        var alert_day_warning = "{% trans with {'itemLoanDays': itemLoanDays} %}calendar.alert_day_warning{% endtrans %}";
        var alert_max_days = "{% trans with {'maxLoanDays': maxLoanDays} %}calendar.alert_max_loan_days{% endtrans %}";
        var alert_min_days = "{% trans with {'minLoanDays': minLoanDays} %}calendar.alert_min_loan_days{% endtrans %}";

        var basketPickupTime, basketReturnTime, basketSiteFromId, basketSiteFromName;
        var page = $("#productMain");
        var borrowModal = $("#borrowModal");
        var extendModal = $("#extendModal");
        var bookings = [];
        var loanUrl = "{{ path('public_loan', {loanId: 99}) }}";

        var currentPickupTime     = moment("{{ currentPickupTime }}");
        var currentPickupSiteId   = {{ currentPickupSiteId }};
        var currentPickupSiteName = "{{ currentPickupSiteName }}";
        var bookingStartFrom;
        var calendarMode = '{% if app.request.get('extend') %}extend{% else %}booking{% endif %}';
        var originalReturnDate = '{{ itemDueInAt }}';

        var bookableDays = []; // an array of YYYY-mm-dd for selectAllow
        var openingTimesByDate = [];
        var closingTimesByDate = [];


        $(document).ready(function() {

            var siteEvents = [];

            var sites = [];
            {% for site in sites %}
            sites[{{ site.id }}] = "{{ site.name }}";
            {% endfor %}

            {% if product.inventoryLocation %}
            var itemSiteId = '{{ product.inventoryLocation.site.id }}';
            {% else %}
            var itemSiteId = '';
            {% endif %}
            var itemSiteName = sites[itemSiteId];

            var dragSelect = true;
            var hasBasket = false;

            // Set the pickup time and location if we already have a basket
            {% if tenantInformation.basket.loanRows is defined
            and tenantInformation.basket.loanRows|length > 0
            and tenantInformation.basket.collectFromSite %}
            basketPickupTime = moment("{{ tenantInformation.basket.loanRows|first.dueOutAt|date("Y-m-d H:i") }}");
            basketReturnTime = moment("{{ tenantInformation.basket.loanRows|first.dueInAt|date("Y-m-d H:i") }}");
            basketSiteFromId = '{{ tenantInformation.basket.collectFromSite.id }}';
            basketSiteFromName = '{{ tenantInformation.basket.collectFromSite.name }}';
            hasBasket = true;
            {% endif %}

            var extendLoanId = '{{ loanId }}';
            var sitesLoaded = false;

            // Set up timepickers
            var timeFromPicker  = $('.show_time_from');
            var timeToPicker    = $('.show_time_to');
            var newTimeToPicker = $('.new_time_to');
            var tFrom = timeFromPicker.timepicker({
                'step' : 15,
                'minTime': '6:00am',
                'maxTime': '10:00pm'
            });
            var tTo = timeToPicker.timepicker({
                'step' : 15,
                'minTime': '6:00am',
                'maxTime': '10:00pm'
            });
            // For extending a loan:
            newTimeToPicker.timepicker({
                'step' : 15,
                'minTime': '6:00am',
                'maxTime': '10:00pm'
            });

            var calendarEl = document.getElementById('calendar');
            var txt;

            var calendar = new FullCalendar.Calendar(calendarEl, {
                plugins: [ 'interaction', 'dayGrid', 'timeGrid' ],
                locale: "{{ app.request.locale }}",
                defaultView: 'dayGridMonth',
                allDaySlot: false,
                selectable: true,
                columnHeaderFormat: { weekday: 'short', day: 'numeric', omitCommas: true },
                minTime: '06:00:00',
                maxTime: '22:00:00',
                header: {
                    left:   'title',
                    center: 'today,dayGridMonth,timeGridWeek',
                    right:  'prev,next'
                },
                dateClick: function(info) {
                    if (currentUserId) {
                        if (sitesLoaded == false) {
                            loadSiteOpeningTimes();
                            borrowModal.modal();
                        } else {
                            alert("{% trans %}public_item.alert_click_time_slot{% endtrans %}");
                        }
                    } else {
                        alert("{% trans %}public_item.log_in_to_borrow{% endtrans %}");
                    }
                },
                eventClick: function(info) {
                    if (info.event.extendedProps.siteId) {
                        eventClickHandler(info.event, info.jsEvent);
                    } else if (info.event.extendedProps.loanId) {
                        goToLoan(info.event);
                    }
                },
                eventRender: function(e) {
                    var calEvent = e.event;
                    var element  = e.el;
                    var today = moment();
                    var start = moment(calEvent.start);
                    var end   = moment(calEvent.end);
                    if (calEvent.title == '-') {
                        // Grey background events
                        return true;
                    }
                    if (start.format("YYYY-MM-DD") == today.format("YYYY-MM-DD")) {
                        currentPickupTime = start;
                        $("#buttonToday").html("Today ("+start.format("HH:mm")+")").show();
                    }
                    if (calEvent.extendedProps.siteName) {
                        // It's a time slot for user selection
                        if (calendar.view.type == 'timeGridWeek') {
                            // We're assuming in week view the user is dragging times not clicking sites
                            // so hide the sites. The site passed to the booking modal is the item's current site.
                            return false;
                        }
                        txt = '';
                        if (calEvent.extendedProps.changeover) {
                            txt = txt + '<div class="t_end" style="font-size: 14px; font-weight: bold; ">' + moment(calEvent.extendedProps.changeover).format("h:mm a ") + '</div>';
                        }
                        txt = txt + '<div class="hidden-xs multi-site">'+calEvent.extendedProps.siteName+'</div>';
                        txt = txt + '<div class="openinghours">' + start.format("HH:mm ")+" to "+end.format("HH:mm ") + '</div>';
                        $(element).html(txt);
                    } else {
                        // the event is a booking
                        if (isAdmin == true) {
                            $(element).html(calEvent.extendedProps.statusName+' '+calEvent.extendedProps.loanTo+'<div style="font-size:10px">'+start.format("D MMMM h:mm a")+" to "+end.format("D MMMM h:mm a")+'</div>');
                        } else if (calEvent.extendedProps.statusName == 'BUFFER') {
                            $(element).html("Unavailable");
                        } else if (currentUserId == calEvent.extendedProps.contactId) {
                            $(element).html(text_my_booking).css('backgroundColor', '#5cb85c').css('borderColor', '#5cb85c');
                        } else if (calEvent.extendedProps.statusName == 'RESERVED') {
                            $(element).html(text_reserved);
                        } else if (calEvent.extendedProps.statusName == 'ON LOAN' || calEvent.extendedProps.statusName == 'OVERDUE') {
                            $(element).html(text_on_loan);
                        } else {
                            $(element).html("");
                        }
                    }
                },
                viewRender: function() {
                    if (basketPickupTime) {
                        // User has a basket
                        setPickup(basketPickupTime, null, null, basketSiteFromId, basketSiteFromName);
                    }
                },
                select: function(info) {
                    setPickup(moment(info.startStr), null, null, currentPickupSiteId, currentPickupSiteName);
                    setReturn(moment(info.endStr), null, null, currentPickupSiteId, currentPickupSiteName, true);
                },
                selectAllow: function(info) {
                    var startOk = false;
                    var endOk = false;
                    var requestedStart = moment(info.startStr);
                    var requestedEnd = moment(info.endStr);
                    var evs = calendar.getEvents();
                    // If the start and end lie within a bookable slot, return true
                    $(evs).each(function() {
                        if (this.extendedProps.siteId) {
                            var slotStart = moment(this.start);
                            var slotEnd = moment(this.end);
                            if (requestedStart >= slotStart && requestedStart <= slotEnd) {
                                startOk = true;
                            }
                            if (requestedEnd >= slotStart && requestedEnd <= slotEnd) {
                                endOk = true;
                            }
                        }
                    });
                    if (startOk == true && endOk == true) {
                        return true;
                    }
                    return false;
                },
                loading: function(bool) {
                    if (bool){
                        // loading
                    } else{
                        // loaded, render a preset pickup time
                        if (basketPickupTime) {
                            setPickup(basketPickupTime, null, null, basketSiteFromId, basketSiteFromName);
                        }
                    }
                }
            });
            calendar.render();

            // FUNCTIONS ::

            // Change the pick up time text and value
            borrowModal.on('selectTime', '#time_from_picker', function() {
                var t = timeFromPicker.timepicker('getTime');
                timeFromPicker.html(moment(t).format("h:mm a"));
                $("#time_from").val(moment(t).format("HH:mm"));
                calculateTotalFee();
            });

            // Change the return time text and value
            borrowModal.on('selectTime', '#time_to_picker', function() {
                var t = timeToPicker.timepicker('getTime');
                timeToPicker.html(moment(t).format("h:mm a"));
                $("#time_to").val(moment(t).format("HH:mm"));
                calculateTotalFee();
            });

            // Change the return up time text and value when extending a loan
            extendModal.on('selectTime', '.new_time_to', function() {
                var t = newTimeToPicker.timepicker('getTime');
                newTimeToPicker.html(moment(t).format("h:mm a"));
                $("#newReturnTime").val(moment(t).format("HH:mm"));

                var start = moment($("#loanStartAt").val());
                var end   = moment($("#newReturnDate").val()+" "+$("#newReturnTime").val()+":00");
                validateBookingPeriod(start, end);
            });

            page.on('click', '.button-borrow', function(event) {
                loadSiteOpeningTimes();
                borrowModal.modal();
            });

            borrowModal.on('click', '.borrowModalCancel', function () {
                resetDates();
                borrowModal.modal('hide');
            });

            borrowModal.on('click', '#set-pickup-today', function () {
                resetDates();
                setPickup(moment(), null, null, itemSiteId, itemSiteName);
            });

            {% if app.user and app.user.activeSite and product.itemType != 'stock' %}
//            This causes clashes when opening an item that's on loan so we won't do it yet
//            resetDates();
//            setPickup(moment(), null, null, itemSiteId, itemSiteName);
            {% endif %}

            borrowModal.on('click', '.site_from', function () {
                if (hasBasket == true) {
                    alert("You can't change the pickup time as you have other items in your basket.");
                    return false;
                }
                resetDates();
                borrowModal.modal('hide');
            });

            borrowModal.on('click', '.site_to', function () {
                borrowModal.modal('hide');
            });

            borrowModal.on('click', '#borrowModalConfirm', function () {
                if (!$("#date_from").val()) { alert("Please set a pickup date."); return false; }
                if (!$("#time_from").val()) { alert("Please set a pickup time."); return false; }
                if (!$("#date_to").val()) { alert("Please set a return date."); return false; }
                if (!$("#time_to").val()) { alert("Please set a return time."); return false; }
                $("#reserve_form").submit();
            });

            // User clicks the 'from' date to choose another day
            borrowModal.on('click', '#choosePickup', function () {
                if (hasBasket == true) {
                    alert("You can't change the pickup time as you have other items in your basket.");
                    return false;
                }
                resetDates();
                borrowModal.modal('hide');
                dragSelect = false; // we just want to choose a date so don't set start AND end dates when click/drag
            });

            borrowModal.on('click', '#chooseReturn', function () {
                borrowModal.modal('hide');
                dragSelect = false; // we just want to choose a date so don't set start AND end dates when click/drag
            });

            // User selects to set a loan by dragging dates for a chosen site
            borrowModal.on('change', '#site-selector', function () {
                currentPickupSiteId = $(this).val();
                currentPickupSiteName = $(this).find('option:selected').text();
                borrowModal.modal('hide');
                calendar.changeView('timeGridWeek');
                // remove the information for all sites:
                var eventSources = calendar.getEventSources();
                var len = eventSources.length;
                for (var i = 0; i < len; i++) {
                    if (eventSources[i].url.search("site-data") != -1) {
                        eventSources[i].remove();
                    }
                }
                // replace with info for just one site:
                addSitesToCal($(this).val());
                dragSelect = true;
            });

            extendModal.on('keyup', '#extensionFeeAmount', function () {
                var feeAmount = $(this).val()*1;
                $(".extension-fee-amount").html(feeAmount.toFixed(2)); // the user display
                $("#loan_extend_paymentAmount").html(feeAmount.toFixed(2)); // the payment amount
                showHidePaymentFields();
            });

            function showHidePaymentFields() {
                $("#paymentErrorMessage").hide(); // in case there was a Stripe error
                var extensionFeeAmount = $("#extensionFeeAmount").val();
                if (extensionFeeAmount > 0) {
                    $("#loan_extend_paymentAmount").val(extensionFeeAmount);
                    $("#confirmDateChange").addClass("payment-submit");
                    $("#creditCards").show();
                } else {
                    $("#loan_extend_paymentMethod").val("");
                    $("#loan_extend_paymentAmount").val("");
                    $("#confirmDateChange").removeClass("payment-submit");
                    $("#creditCards").hide();
                }
                if (isAdmin) {
                    $("#payment-amount-column").show();
                } else {
                    $("#payment-amount-column").hide();
                }
            }

            function loadSiteOpeningTimes() {
                sitesLoaded = true;
                addSitesToCal();
                $("#item-core").hide();
                $(".block-borrow").fadeIn(100);
                $('html, body').animate({
                    scrollTop: $("#item-title").offset().top - 10
                }, 800);
            }

            // ADD BOOKINGS AND SITE OPENING EVENTS
            addBookingsToCal();

            function resetDates() {
                // The data fields
                $("#date_from").val('');
                $("#date_to").val('');
                $("#time_to").val('');
                $("#time_from").val('');

                $(".total_fee").html('0.00');
                $(".count_days").html('');
                $(".date_to").html('');
                $(".site_to").html('');
                $(".date_from").html('');
                $(".site_from").html('');

                // The links in the borrow modal
                $(".show_time_to").html('');
                $(".show_time_from").html('');
                $("#choosePickup").html('');
                $("#chooseReturn").html('');
            }

            function eventClickHandler(calEvent, jsEvent) {

                var eventStart = moment(calEvent.start);
                var eventEnd   = moment(calEvent.end);

                // Get the changeover time for the clicked opening slot
                // If this is null, we use the slot start for pickup and slot end for return
                var selectedTime = null;
                if (calEvent.extendedProps.changeover) {
                    selectedTime = moment(calEvent.extendedProps.changeover);
                }

                var siteName = calEvent.extendedProps.siteName;
                var siteId   = calEvent.extendedProps.siteId;

                var duration, days, hours, extensionFee;

                if (calendarMode == 'extend') {

                    console.log("Extending a loan");
                    if (!validateBookingPeriod(eventStart, eventEnd, siteId)) {
                        return false;
                    }

                    var originalDate = moment(originalReturnDate);
                    duration = moment.duration(eventEnd.diff(originalDate));
                    days = duration.asDays();
                    days = Math.round(days);

                    // UI
                    $(".new_date_to").html(eventEnd.format("dddd DD MMMM"));
                    $(".new_time_to").html(eventEnd.format("h:mm a"));
                    $(".new_return_site").html(siteName);

                    // Populate the form data
                    $("#newReturnDate").val(eventEnd.format("YYYY-MM-DD"));
                    $("#newReturnTime").val(eventEnd.format("HH:mm:00"));
                    $("#newReturnSiteId").val(siteId);
                    $(".original_return_date").html(originalDate.format("dddd DD MMMM h:mm a"));
                    $(".extend_days").html(days);

                    // Set the valid times on the time picker, if we are setting pickup from a time slot
                    if (eventStart && eventEnd) {
                        newTimeToPicker.timepicker('option', { 'minTime': eventStart.format("h:mma"), 'maxTime': eventEnd.format("h:mma") });
                    }

                    if (dailyFee > 0) {
                        if (fixedFeePricing == 1) {
                            extensionFee = itemFee;
                        } else {
                            extensionFee = dailyFee * days;
                        }
                        if (days < 0) {
                            extensionFee = 0; // don't charge negative fees
                        }
                        $("#extensionFeeAmount").val(extensionFee.toFixed(2));
                        $(".extension-fee-amount").html(extensionFee.toFixed(2));
                        showHidePaymentFields();
                    }

                    extendModal.modal();
                } else {
                    // Booking or reserving
                    if ($("#date_from").val()) {
                        // We've already set the start date, check the period is OK
                        if (!selectedTime) {
                            // No changeover time, use the end of the slot
                            selectedTime = eventEnd;
                        }
                        setReturn(selectedTime, eventStart, eventEnd, siteId, siteName, true, calEvent.extendedProps.changeover);
                    } else {
                        // We've not chosen a start date yet, user is selecting pick up
                        if (!selectedTime) {
                            // No changeover time, use the beginning of the slot
                            selectedTime = eventStart;
                        }
                        // Set pickup time, allowing the system to auto-set the return time if there is a visible slot
                        setPickup(selectedTime, eventStart, eventEnd, siteId, siteName, true, calEvent.extendedProps.changeover);
                        borrowModal.modal();
                    }
                }
            }

            function setReturn(selectedTime, clickedSlotFrom, clickedSlotTo, siteId, siteName, showModal) {

                console.log("Setting return time");

                var duration, days, hours;
                bookingStartFrom = moment($("#date_from").val()+" "+$("#time_from").val()+":00");

                duration     = moment.duration(selectedTime.diff(bookingStartFrom));
                days         = duration.asDays();
                hours        = duration.asHours();
                days         = Math.round(days);

                if (maxLoanDays > 0 && days > maxLoanDays && isAdmin == false) {
                    alert(alert_max_days);
                    return false;
                }
                if (minLoanDays > 0 && days < minLoanDays && isAdmin == false) {
                    alert(alert_min_days);
                    return false;
                }
                if (!validateBookingPeriod(bookingStartFrom, selectedTime, siteId)) {
                    return false;
                }

                // Set the return date, time and site
                $("#date_to").val(selectedTime.format("YYYY-MM-DD"));
                $("#time_to").val(selectedTime.format("HH:mm"));
                $("#to_site").val(siteId);
                $(".show_date_to").html('<i class="far fa-clock"></i> '+selectedTime.format("DD MMMM"));
                $(".show_time_to").html(selectedTime.format("h:mm a"));
                $(".site_to").html('<i class="far fa-hospital"></i> '+siteName);

                // Set the valid times on the time picker based on opening slot times
                if (clickedSlotFrom && clickedSlotTo) {
                    timeToPicker.timepicker('option', { 'minTime': clickedSlotFrom.format("h:mma"), 'maxTime': clickedSlotTo.format("h:mma") });
                }

                if (showModal == true) {
                    borrowModal.modal();
                }

                calculateTotalFee();

                var returnCell = $(".fc-bg").find("[data-date='"+selectedTime.format("YYYY-MM-DD")+"']");
                $(".return-day").remove();
                var text_return_day = 'Return';
                returnCell.html('<div class="label label-xs label-default return-day">'+text_return_day+'</div>');

                $("#chooseReturnButton").hide();
                $(".borrow-modal-confirm").show();

            }

            function setPickup(selectedTime, clickedSlotFrom, clickedSlotTo, siteId, siteName, autoSetReturn, changeOver) {

                console.log("Setting pickup time to "+selectedTime.format("YYYY-MM-DD HH:mm"));
                $("#booking-help").show();

                if (!validatePickupDate(selectedTime)) {
                    $("#button-borrow").remove();
                    alert(text_clash_date);
                    return false;
                }

                if (!validatePickupSite(siteId)) {
                    $("#button-borrow").remove();
                    alert("Your chosen site "+siteId+" does not exist.");
                    return false;
                }

                $(".pickup-day").remove();

                // Set the pickup date
                $("#date_from").val(selectedTime.format("YYYY-MM-DD"));
                $("#time_from").val(selectedTime.format("HH:mm"));
                $("#from_site").val(siteId);

                $(".show_date_from").html('<i class="far fa-clock"></i> '+selectedTime.format("DD MMMM") );
                $(".show_time_from").html( selectedTime.format("h:mm a") );

                $(".site_from").html('<i class="far fa-hospital"></i> '+siteName);
                $("#choosePickupButton").hide();
                $("#set-pickup-today").hide();
                $("#chooseReturn").show();

                // Set the valid times on the time picker, if we are setting pickup from a time slot
                if (clickedSlotFrom && clickedSlotTo) {
                    timeFromPicker.timepicker('option', { 'minTime': clickedSlotFrom.format("h:mma"), 'maxTime': clickedSlotTo.format("h:mma") });
                }

                if (!$("#date_to").val()) {
                    // This is the first time we're setting pickup
                    $("#chooseReturnButton").show();
                }

                var pickupCell = $(".fc-bg").find("[data-date='"+selectedTime.format("YYYY-MM-DD")+"']");
                pickupCell.html('<div class="label label-xs label-default pickup-day">'+text_pickup_day+'</div>');


                var returnTime;
                if (basketPickupTime) {
                    autoSetReturn = true;
                    returnTime = basketReturnTime;
                } else {
                    returnTime = moment(selectedTime);
                    returnTime = returnTime.add(itemLoanDays, 'd');

                    if (!changeOver && clickedSlotTo.format('HH')) {
                        returnTime = returnTime.set({hour: clickedSlotTo.format('HH')});
                    }
                }

                basketPickupTime = selectedTime;
                basketSiteFromId = siteId;
                basketSiteFromName = siteName;

                // Set the default return day based on item loan days if user has manually chosen pickup time
                if (selectedTime && itemLoanDays > 1 && autoSetReturn == true) {
                    if (!isValidBookingTime(returnTime, siteId)) {
                        console.log("Cannot auto-set end date as there is no opening hour slot for T+"+itemLoanDays);
                    } else {
                        console.log("Auto-setting return time based on item loan period.");
                        setReturn(returnTime, null, null, siteId, siteName, false);
                    }
                }
            }

            // We used to have this function which checked the left menu contained the site key
            // But with new theme based sites it's not always present
            function validatePickupSite(siteId) {
                var returnValue = true;
                if (!$(".site-id-"+siteId).html()) {
                    returnValue = false;
                }
                return returnValue;
            }

            function validatePickupDate(time) {
                var returnValue = true;
                $(bookings).each(function() {
                    var bookingStart = moment(this.start);
                    var bookingEnd   = moment(this.end);
                    if (bookingStart < time && bookingEnd > time) {
                        // This pickup time lies within another booking
                        console.log("validatePickupDate : pickup time lies within other booking");
                        returnValue = false;
                    }
                });
                return returnValue;
            }

            function validateBookingPeriod(start, end, siteId) {
                console.log("validateBookingPeriod: "+
                        " From: "+start.format("YYYY-MM-DD HH:mm:00") +
                        " To: "+end.format("YYYY-MM-DD HH:mm:00"));

                validateLoanPeriod({{ product.id }}, start.format("YYYY-MM-DD HH:mm:00"), end.format("YYYY-MM-DD HH:mm:00"), siteId);

                if (!isValidBookingTime(start, siteId)) {
                    console.log("validateBookingPeriod : start time is not within opening hours");
                    alert("Start time is not within opening hours");
                    return false;
                }

                if (!isValidBookingTime(end, siteId)) {
                    console.log("validateBookingPeriod : end time is not within opening hours");
                    alert("End time is not within opening hours");
                    return false;
                }

                if (moment(end) < moment(start)) {
                    alert(text_return_after_pickup+" ("+start.format("DD MMMM h:mm a")+")");
                    return false;
                }

                console.log("Validated OK against site opening times.");
                return true;
            }

            function validateLoanPeriod(itemId, timeFrom, timeTo) {
                console.log("validateLoanPeriod AJAX call");
                $.get( "{{ path('validate_loan_period') }}?itemId="+itemId+"&timeFrom="+timeFrom+"&timeTo="+timeTo+"&loanId="+extendLoanId, function( data ) {
                    console.log(data);
                    if (data.error) {
                        console.log("AJAX validation says no");
                        $("#modalWarning").html(text_clash_date).fadeIn();
                        $("#borrowModalConfirm").attr('disabled', true);
                        $("#confirmDateChange").attr('disabled', true);
                    } else {
                        $("#modalWarning").hide();
                        $("#borrowModalConfirm").attr('disabled', false);
                        $("#confirmDateChange").attr('disabled', false);
                    }
                });
            }

            /** Returns the event that the time was found in */
            function isValidBookingTime(time, siteId) {

                let opened = false;

                let timeStr = time.format('YYYY-MM-DD HH:mm:ss');

                // Check that this time is available for this time and site
                $(siteEvents).each(function (i, event) {

                    if (!isNaN(parseInt(event.siteId)) && parseInt(event.siteId) === parseInt(siteId)) {

                        if (timeStr === event.start || timeStr === event.end) {
                            opened = true;
                        }

                    }

                });

                if (!opened) {
                    return false;
                }

                // Currently have an issue where moving the calendar a month forwards replaces the array that we validate start time against
                // Fix : move the events into a global non-calendar dataset as the calendar view is moved around and validate against that
                return true;
                var eventFound = null;
                $(calendar.getEvents()).each(function(i, event) {
//                    Enable this extra validation when we figure out how to click-drag over multiple sites
//                    For now, just return OK if there is any site open at this time
//                    @TODO
//                    if (event.extendedProps.siteId == siteId) {
                    if (event.extendedProps.siteId > 0) {
                        if (time >= moment(event.start) && time <= moment(event.end)) {
                            eventFound = event;
                        }
                    }
                });
                return eventFound;
            }

            function goToLoan(calEvent) {
                if (currentUserId != calEvent.extendedProps.contactId && isAdmin == false) {
                    alert(alert_not_your_booking);
                    return false;
                }
                var loanId   = calEvent.extendedProps.loanId;
                loanUrl = loanUrl.replace("99", loanId);
                document.location.href = loanUrl;
            }

            function calculateTotalFee() {
                var start = moment($("#date_from").val()+" "+$("#time_from").val());
                var end   = moment($("#date_to").val()+" "+$("#time_to").val());
                var duration   = moment.duration(end.diff(start));
                var days       = duration.asDays();
                var hours      = duration.asHours();
                var accountBalance = {{ contactBalance }};
                var totalFee;

                // Round to nearest day
                days = Math.round(days);
                hours = Math.round(hours);

                if (fixedFeePricing == 1) {
                    totalFee = itemFee;
                } else {
                    totalFee = dailyFee * days;
                }

                if (totalFee > accountBalance) {
                    $(".credit-warning").show();
                } else {
                    $(".credit-warning").hide();
                }
                $(".total_fee").html(totalFee.toFixed(2));
                $("#total_fee").val(totalFee.toFixed(2)); // form input

                if (days < 1) {
                    $(".count_days").html(hours+" {% transchoice 2 %}hours{% endtranschoice %}");
                } else {
                    $(".count_days").html(days+" {% transchoice 2 %}days{% endtranschoice %}");
                }
            }

            function addSitesToCal(siteId) {
                var url;
                if (siteId == undefined) {
                    url = "{{ path('site_data') }}?itemId={{ product.id }}&excludeLoanRowId={{ app.request.get('extend') }}";
                } else {
                    url = "{{ path('site_data') }}?itemId={{ product.id }}&excludeLoanRowId={{ app.request.get('extend') }}&siteId="+siteId;
                }

                calendar.addEventSource( {
                    url: url,
                    type: 'GET',
                    failure: function() {
                        // For some reason this triggers when we do actually get site data back
                        // alert('There was an error while fetching site opening times.');
                    },
                    success: function(events) {
                        setBookableDays(events);
                        siteEvents = events;
                    },
                    textColor: 'black',
                    className: 'siteOpening'
                });
            }

            function addBookingsToCal() {
                var url = '{{ path('item_reservations_json', {itemId: product.id}) }}';
                calendar.addEventSource( {
                    url: url,
                    type: 'GET',
                    failure: function() {
                        //alert('There was an error while fetching bookings. Please reload the page.');
                    },
                    success: function(events) {
                        bookings = events; // Save for booking and selectable cell validation
                    },
                    textColor: 'white'
                });
            }

            // Used for selectAllow logic (create greyed-out days outside of site hours)
            function setBookableDays(events) {
                var date;

                // remove all existing greyed out events
                var evs = calendar.getEvents();
                $(evs).each(function() {
                    if (this.title == '-') {
                        this.remove();
                    }
                });

                openingTimesByDate = [];
                closingTimesByDate = [];
                bookableDays = [];

                $(events).each(function() {
                    date = this.start.substring(0, 10);
                    bookableDays.unshift(date);
                    if (openingTimesByDate[date] == undefined || this.start < openingTimesByDate[date]) {
                        openingTimesByDate[date] = this.start;
                    }
                    if (closingTimesByDate[date] == undefined || this.end > closingTimesByDate[date]) {
                        closingTimesByDate[date] = this.end;
                    }
                });

                // put grey days otherwise; these will match with selectAllow
                var day    = moment(calendar.view.activeStart);
                var endDay = moment(calendar.view.activeEnd);
                while (day < endDay) {
                    if ($.inArray(day.format("YYYY-MM-DD"), bookableDays) != -1) {
                        // we have an opening slot on this day
                        // create a grey event from midnight to the first opening time
                        calendar.addEvent(
                                {
                                    'title': "-",
                                    'start': day.format("YYYY-MM-DD 00:00:00"),
                                    'end': openingTimesByDate[day.format("YYYY-MM-DD")],
                                    'rendering': 'background',
                                    'color': '#AAA'
                                }
                        );
                        // create a grey event from the last closing time to midnight
                        calendar.addEvent(
                                {
                                    'title': "-",
                                    'start': closingTimesByDate[day.format("YYYY-MM-DD")],
                                    'end': day.format("YYYY-MM-DD 23:59:59"),
                                    'rendering': 'background',
                                    'color': '#AAA'
                                }
                        );
                    } else {
                        // Add an all-day grey event
                        calendar.addEvent(
                                {
                                    'title': "-",
                                    'start': day.format("YYYY-MM-DD"),
                                    'end': day.format("YYYY-MM-DD"),
                                    'rendering': 'background',
                                    'color': '#AAA'
                                }
                        );
                    }
                    day.add(1, 'days');
                }
            }

            // EXTENDING A LOAN
            {% if app.request.get('extend') %}
            loadSiteOpeningTimes();
            var pickupCell = $(".fc-bg").find("[data-date='{{ itemDueInAt|slice(0,10) }}']");
            pickupCell.css('backgroundColor', '#d9edf7');
            pickupCell.html('<div style="padding: 5px; font-size: 10px;">Due back</div>');
            {% endif %}

        });
    </script>
{% endblock %}