{% extends 'member_site/themes/loader.html.twig' %}
{% trans_default_domain 'member_site' %}

{% block pageCss %}
    <script>

        function getApiKey()
        {
            return atob('{{ apiKey }}');
        }

        (g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})({
            key: getApiKey(),
            v: "weekly"
        });
    </script>
{% endblock %}

{% block body %}

    <div class="row" id="site-list">

        <div class="col-sm-12">
            <h2>{% trans %}public_footer.find_us{% endtrans %}</h2>
        </div>

        <div class="col-sm-6">

            <style type="text/css">
                .sites_map
                {
                    height:400px;
                    width:100%;
                    display:block;
                }
            </style>

            <div class="sites_map" id="map"></div>

            <script type="text/javascript">

                let map;
                let geocoder;
                let marker;
                let sites = [];

                async function initMap()
                {
                    const {Map} = await google.maps.importLibrary("maps");

                    map = new Map(document.getElementById("map"), {
                        zoom: 8,
                    });
                }

                initMap();

                window.onload = () => {
                    geocoder      = new google.maps.Geocoder();
                    window.bounds = new google.maps.LatLngBounds();

                    addMap();
                };

                function addMap()
                {
                    geocoder.geocode(
                        {
                            'address': '{{ sites[0].address }}, {{ sites[0].postCode }}, {{ sites[0].country }}'
                        },
                        function (results, status) {

                            if (status == google.maps.GeocoderStatus.OK) {
                                //var _position = { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng()};
                                console.log(status);
                            } else {
                                console.log(status);
                            }

                            {% for site in sites %}
                            {% if site.isActive %}
                            geocoder.geocode({'address': '{{ site.address }}, {{ site.postCode }}, {{ site.country }}'},
                                function (results, status) {
                                    if (status == google.maps.GeocoderStatus.OK) {
                                        var location = {};
                                        location.lat = results[0].geometry.location.lat();
                                        location.lng = results[0].geometry.location.lng();
                                        sites.push(location);
                                    } else {
                                        console.log(status);
                                    }
                                });
                            {% endif %}
                            {% endfor %}


                        });

                    window.setTimeout(setBounds, 1000);
                }

                function setBounds()
                {
                    console.log("sites:");
                    for (i = 0; i < sites.length; i++) {
                        marker = new google.maps.Marker({
                            position: new google.maps.LatLng(sites[i].lat, sites[i].lng),
                            map:      map
                        });
                        console.log("Adding site at " + sites[i].lat + ", " + sites[i].lng);
                        window.bounds.extend(marker.position);
                    }
                    map.fitBounds(window.bounds);
                }
            </script>

        </div>
        <div class="col-sm-6">

            <style>
                .site-header {
                    font-size: 18px;
                    font-weight: bold;
                    border-bottom: 1px solid #ccc;
                    margin-bottom: 10px;
                }
                .opening-header {
                    font-weight: bold;
                }
            </style>

            {% for site in sites %}
                {% if site.isActive %}
                <div class="row" id="site-{{ site.id }}">

                    <div class="site-header">{{ site.name }}</div>

                    <div class="col-md-6">
                        {{ site.address }}
                        <br>{{ site.postCode }}
                    </div>
                    <div class="col-md-6" style="font-size: 12px;">

                        {% if site.siteOpenings|length > 0 %}
                            <div class="opening-header">Open every week:</div>
                            {% for opening in site.siteOpenings %}
                                <div>
                                    {{ opening.weekDayName }}, {{ opening.friendlyTimeFrom }} - {{ opening.friendlyTimeTo }}
                                </div>
                            {% endfor %}
                        {% endif %}

                        {#Get events#}
                        {% if site.openTimes('published')|length > 0 %}

                            {% if site.siteOpenings|length > 0 %}
                                <br>
                                <div class="opening-header">
                                    Also open:
                                </div>
                            {% else %}
                                <div class="opening-header">
                                    Open:
                                </div>
                            {% endif %}

                            {% for slot in site.openTimes('published') %}
                                <div style="padding-bottom: 3px">
                                    {% if slot.title %}
                                        <a href="{{ path('event_preview', {eventId: slot.id}) }}" class="modal-link">{{ slot.title }}</a><br>
                                    {% endif %}
                                    {{ slot.date|date("l d F", "Europe/London") }}, <br>
                                    {{ slot.friendlyTimeFrom }} - {{ slot.friendlyTimeTo }}
                                </div>
                            {% endfor %}

                        {% endif %}

                    {% if site.closedTimes|length > 0 %}
                        <br>
                        <div class="opening-header">
                            Closed:
                        </div>

                        {% for slot in site.closedTimes %}
                            <div style="padding-bottom: 3px">
                                {{ slot.date|date("l d F") }}
                            </div>
                        {% endfor %}
                    {% endif %}
                    </div>

                </div>

                <br>
                {% endif %}
            {% endfor %}

        </div>

    </div>

{% endblock %}